**Initial Setup**
    - Create a folder to establish a workspace with the project's name
    - Use the Visual Studio Code command "Create Environment" to establish
      a virtual environment (select "venv" when prompted).
    - Select the python interpreter you wish to copy from. In this example,
      the global 3.11 python option was chosen
    - Open a terminal in this workspace and use the following command to
      install flask in this area ->
        - pyton -m pip install flask

**Minimally Working Flask App**
    - Add the basic elements found in app.py
    - Use the following command to run the app -->
        - python -m flask run
    - Using the default browser, the URL of this app is located at -->
        - localhost:5000 or 127.0.0.1:5000
        - This indicates the local IP address of the computer followed by the
          default port number.

**Installing and Checking for Installed Packages**
    - When installing a needed package, like "requests" into the current 
      interpreter environment -->
        - python -m pip install [package_name]
    - When you need to list what is currently installed use the following
      command --> 
        - pip list

**Activating the Virtual Environment** (QUOTATION MARKS ARE NEEDED)
& "c:/Users/Christopher Porter/Desktop/thesquad-api/.venv/Scripts/Activate.ps1"

**Starting the Deploying Phase**
    - Installing Gunicorn (venv)
        - pip install Gunicorn
    - Create the requirements txt file
        - pip freeze > requirements.txt
        - (This file should now have all the installed packages)
    - Create a runtime.txt file
        - type in the version of python being used
    - Create a Procfile
        - Simply create a file called "Procfile". Enter one line of text -->
            - web: gunicorn app:app --log-file=-
            - "where", "what", "app_name"
    - Turn off Debug Mode
        - In the "main" thing turn debug to false
    - Install the Heroku CLI
        - npm install -g Heroku
        - Confirm version with: heroku --version
    - Login to the Heroku CLI 
        - heroku Login
        - It will then prompt you to click a button
    - Create an App in Heroku itself
        - Navigate through the dashboard and create a new app
    - Setting the WebCurrency value
        - heroku config:set WEB_CONCURRENCY=3

**Initializing Heroku's Git Services**
    - In the main project folder initialize a git repository
        - git init .
    - Add all currently necessary files
        - git add .
    - Establish the first commit
        - git commit -m "initial commit"
    - Need to add this local repository to the Heroku one
        - heroku git:remote -a [app_name_in_heroku]
    - Push the commit to Heroku's master branch
        - git push heroku master

**PUSHING FUTURE UPDATES**
    - pip freeze > requirements.txt
    - git add . 
    - git commit -m "<message>"
    - git push heroku master

**TURNING APP ON AND OFF**
    - heroku maintenance:on
        - The app serves a static maintenance page 
    - heroku maintenance:off 
        - Disables maintenance mode 
    - heroku maintenance 
        - Displays the status of whether the mode is enabled

**USING CONFIG VARS**
    - Create a .env and .flaskenv file in the local folder and add them to the .gitignore file
        - .env
        - .flaskenv
    - Install the python package necessary for Flask to use these files correctly
        - pip install python-dotenv
    - Add the exact same config var that is shown when using the command "heroku config"
      and add it to the .env
    - To use this environment variable in code, use the following command:
        - variable = os.environ.get('<.env_var_name>')   or
        - stored_key = os.environ.get('RIOT_KEY')

**EDITTING CONFIG VARS**
    - "heroku config"
        - This will output all the current config variables currently stored by Heroku
    - "heroku config:set <config_var_name>=<new_data>
        - Use this command to change a config vars data